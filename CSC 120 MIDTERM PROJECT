import java.util.Scanner;

/**
 * The Florida Dental Association program to record family tooth data for one family.
 * It allows operations such as printing records, extracting a tooth, and calculating root canal indices.
 */
public class FloridaDentalAssociation {

    // Constants representing tooth types
    private static final char INCISOR = 'I';
    private static final char BICUSPID = 'B';
    private static final char MISSING = 'M';
    private static final int MAX_FAMILY_SIZE = 6;
    private static final int MAX_TEETH = 8;

    /**
     * The main method to run the Florida Dental Association program.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Welcome message
        System.out.println("Welcome to the Floridian Tooth Records");
        System.out.println("--------------------------------------");

        // Get family size and validate it
        int familySize = getFamilySize(scanner);

        // Arrays to hold family names and their teeth data
        String[] familyNames = new String[familySize];
        char[][][] familyTeeth = new char[familySize][2][MAX_TEETH]; // 3D array: person, uppers/lowers, teeth

        // Get information for each family member
        for (int i = 0; i < familySize; i++) {
            System.out.print("Please enter the name for family member " + (i + 1) + ": ");
            familyNames[i] = scanner.next();
            System.out.print("Please enter the uppers for " + familyNames[i] + ": ");
            familyTeeth[i][0] = getTeeth(scanner, MAX_TEETH);  // Upper teeth
            System.out.print("Please enter the lowers for " + familyNames[i] + ": ");
            familyTeeth[i][1] = getTeeth(scanner, MAX_TEETH);  // Lower teeth
        }

        // Main program loop for menu
        boolean exit = false;
        while (!exit) {
            System.out.print("(P)rint, (E)xtract, (R)oot, e(X)it: ");
            char option = scanner.next().toUpperCase().charAt(0);

            switch (option) {
                case 'P':
                    printFamilyTeeth(familyNames, familyTeeth);
                    break;
                case 'E':
                    extractTooth(scanner, familyNames, familyTeeth);
                    break;
                case 'R':
                    calculateRootCanalIndices(familyTeeth);
                    break;
                case 'X':
                    System.out.println("Exiting the Floridian Tooth Records :-)");
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid menu option, try again.");
            }
        }

        scanner.close();
    }

    /**
     * Gets the family size and validates the input.
     *
     * @param scanner Scanner for user input.
     * @return Validated family size.
     */
    private static int getFamilySize(Scanner scanner) {
        int size = -1;
        while (size < 1 || size > MAX_FAMILY_SIZE) {
            System.out.print("Please enter number of people in the family: ");
            size = scanner.nextInt();
            if (size < 1 || size > MAX_FAMILY_SIZE) {
                System.out.println("Invalid number of people, try again.");
            }
        }
        return size;
    }

    /**
     * Collects and validates teeth records for a family member.
     *
     * @param scanner Scanner for user input.
     * @param maxTeeth Maximum number of teeth.
     * @return Array representing the teeth of a family member.
     */
    private static char[] getTeeth(Scanner scanner, int maxTeeth) {
        char[] teeth = new char[maxTeeth];
        boolean valid = false;

        while (!valid) {
            String input = scanner.next().toUpperCase();  // Convert to uppercase for consistency
            if (input.length() > maxTeeth) {
                System.out.println("Too many teeth, try again.");
                continue;
            }

            valid = true;
            for (int i = 0; i < input.length(); i++) {
                char tooth = input.charAt(i);
                if (tooth != INCISOR && tooth != BICUSPID && tooth != MISSING) {
                    valid = false;
                    System.out.println("Invalid teeth types, try again.");
                    break;
                }
                teeth[i] = tooth;
            }
        }
        return teeth;
    }

    /**
     * Prints the family's tooth records.
     *
     * @param familyNames Array of family member names.
     * @param familyTeeth 3D array of family teeth data.
     */
    private static void printFamilyTeeth(String[] familyNames, char[][][] familyTeeth) {
        for (int i = 0; i < familyNames.length; i++) {
            System.out.println(familyNames[i]);
            System.out.print("  Uppers: ");
            printTeethRow(familyTeeth[i][0]);  // Print uppers
            System.out.print("  Lowers: ");
            printTeethRow(familyTeeth[i][1]);  // Print lowers
        }
    }

    /**
     * Prints a row of teeth (either uppers or lowers).
     *
     * @param teeth Array representing a row of teeth.
     */
    private static void printTeethRow(char[] teeth) {
        for (int i = 0; i < teeth.length; i++) {
            if (teeth[i] != 0) {  // Only print if tooth is defined (not empty)
                System.out.print((i + 1) + ":" + teeth[i] + " ");
            }
        }
        System.out.println();
    }

    /**
     * Extracts a tooth from a specific family member.
     *
     * @param scanner Scanner for user input.
     * @param familyNames Array of family member names.
     * @param familyTeeth 3D array of family teeth data.
     */
    private static void extractTooth(Scanner scanner, String[] familyNames, char[][][] familyTeeth) {
        System.out.print("Which family member: ");
        String name = scanner.next();
        int memberIndex = -1;
        for (int i = 0; i < familyNames.length; i++) {
            if (familyNames[i].equalsIgnoreCase(name)) {
                memberIndex = i;
                break;
            }
        }
        if (memberIndex == -1) {
            System.out.println("Invalid family member, try again.");
            return;
        }

        System.out.print("Which tooth layer (U)pper or (L)ower: ");
        char layer = scanner.next().toUpperCase().charAt(0);
        int layerIndex = (layer == 'U') ? 0 : (layer == 'L') ? 1 : -1;
        if (layerIndex == -1) {
            System.out.println("Invalid layer, try again.");
            return;
        }

        System.out.print("Which tooth number: ");
        int toothNumber = scanner.nextInt();
        if (toothNumber < 1 || toothNumber > MAX_TEETH || familyTeeth[memberIndex][layerIndex][toothNumber - 1] == MISSING) {
            System.out.println("Invalid tooth number or tooth already missing, try again.");
            return;
        }

        familyTeeth[memberIndex][layerIndex][toothNumber - 1] = MISSING;
        System.out.println("Tooth extracted successfully.");
    }

    /**
     * Calculates and prints the root canal indices for the family.
     *
     * @param familyTeeth 3D array of family teeth data.
     */
    private static void calculateRootCanalIndices(char[][][] familyTeeth) {
        int incisors = 0;
        int bicuspids = 0;
        int missing = 0;

        for (char[][] person : familyTeeth) {
            for (char[] row : person) {
                for (char tooth : row) {
                    if (tooth == INCISOR) {
                        incisors++;
                    } else if (tooth == BICUSPID) {
                        bicuspids++;
                    } else if (tooth == MISSING) {
                        missing++;
                    }
                }
            }
        }

        // Calculate roots of the equation I*x^2 + B*x - M = 0
        double discriminant = Math.pow(bicuspids, 2) - 4 * incisors * (-missing);
        if (discriminant < 0) {
            System.out.println("No real roots.");
        } else {
            double root1 = (-bicuspids + Math.sqrt(discriminant)) / (2 * incisors);
            double root2 = (-bicuspids - Math.sqrt(discriminant)) / (2 * incisors);
            System.out.printf("One root canal at %.2f%n", root1);
            System.out.printf("Another root canal at %.2f%n", root2);
        }
    }
}
